// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "todo/pkg/model"

// TodoUseCase is an autogenerated mock type for the TodoUseCase type
type TodoUseCase struct {
	mock.Mock
}

// CreateTodo provides a mock function with given fields: ctx, content
func (_m *TodoUseCase) CreateTodo(ctx context.Context, content *model.TodoContent) (*model.TodoInfo, error) {
	ret := _m.Called(ctx, content)

	var r0 *model.TodoInfo
	if rf, ok := ret.Get(0).(func(context.Context, *model.TodoContent) *model.TodoInfo); ok {
		r0 = rf(ctx, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TodoInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.TodoContent) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: ctx, id
func (_m *TodoUseCase) DeleteTodo(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotDoneTodo provides a mock function with given fields: ctx
func (_m *TodoUseCase) GetNotDoneTodo(ctx context.Context) (*[]model.TodoInfo, error) {
	ret := _m.Called(ctx)

	var r0 *[]model.TodoInfo
	if rf, ok := ret.Get(0).(func(context.Context) *[]model.TodoInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.TodoInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoById provides a mock function with given fields: ctx
func (_m *TodoUseCase) GetTodoById(ctx context.Context) (*model.TodoInfo, error) {
	ret := _m.Called(ctx)

	var r0 *model.TodoInfo
	if rf, ok := ret.Get(0).(func(context.Context) *model.TodoInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TodoInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTodoDone provides a mock function with given fields: ctx, id
func (_m *TodoUseCase) SetTodoDone(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTodo provides a mock function with given fields: ctx, content
func (_m *TodoUseCase) UpdateTodo(ctx context.Context, content *model.TodoContent) (*model.TodoInfo, error) {
	ret := _m.Called(ctx, content)

	var r0 *model.TodoInfo
	if rf, ok := ret.Get(0).(func(context.Context, *model.TodoContent) *model.TodoInfo); ok {
		r0 = rf(ctx, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TodoInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.TodoContent) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
